openapi: 3.0.0
info:
  description: E-commerce API
  version: 1.0.0
  title: E-commerce API
  license:
    name: MIT
    url: https://spdx.org/licenses/MIT.html
servers:
- url: http://localhost:3000
  description: Development server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
- bearerAuth: []
schemes:
- http
paths:
  #-----authentication-----
  /auth/register:
    post:
      tags: 
      - Authentication
      summary: Register a new user
      description: Registers a new user and returns the created object
      requestBody:
        name: Register
        description: Register object with new data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/Register'
      responses:
        201:
          description: Successful response
          schema:
            $ref: '#/definitions/User'

  /auth/login:
    post:
      tags:
      - Authentication
      summary: Login a user
      description: Logins a user and returns the created object
      requestBody:
        name: Login
        description: Login object with data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/Login'
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/User'

  /auth/logout:
    get:
      tags:
      - Authentication
      summary: Logout a user
      description: Logouts a user
      responses:
        200:
          description: Successful response

  #-----user-----
  /user:
    get:
      tags: 
      - Users
      summary: Retrieve all user
      description: Returns a list of all user
      responses:
        200:
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/User'

  /user/{id}:
    get:
      tags: 
      - Users
      summary: Retrieve a single user
      description: Returns a single user by ID
      parameters:
      - in: path
        name: id
        description: User ID to retrieve
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/User'
        404:
          description: User not found

  /user/{id}/update:
    patch:
      tags: 
      - Users
      summary: Update a user
      description: Updates an existing user and returns the updated object
      parameters:
      - in: path
        name: id
        description: User ID to update
        required: true
        schema:
          type: string
      requestBody:
        name: User
        description: User object with new data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/UserInput'
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/User'
        404:
          description: User not found

  /user/{id}/delete:
    delete:
      tags: 
      - Users
      summary: Delete a user
      description: Deletes a user by ID
      parameters:
      - in: path
        name: id
        description: User ID to delete
        required: true
        schema:
          type: string
      responses:
        204:
          description: Successful response

  /user/{id}/update/address:
    patch:
      tags: 
      - Users
      summary: Update a user address
      description: Updates an existing user address and returns the updated object
      parameters:
      - in: path
        name: id
        description: User ID to update
        required: true
        schema:
          type: string
      requestBody:
        name: User address
        description: User adsress object with new data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/AddressInput'
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/User'
        404:
          description: User not found

  /user/{id}/avatar:
    patch:
      tags: 
      - Users
      summary: Upload user avatar
      description: Upload a new avatar for a user
      parameters:
      - in: path
        name: id
        description: ID of the user to upload for avatar
        schema:
          type: string
      requestBody:
        name: Avatar
        description: Avatar file with new file
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
      responses:
        200:
          description: Avatar uploaded successfully
        400:
          description: Invalid input provided

  /user/{id}/image:
    get:
      tags: 
      - Users
      summary: Retrieve a single user avatar
      description: Returns a single user avatar by ID
      parameters:
      - in: path
        name: id
        description: User ID to retrieve
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful response
        404:
          description: User not found

  #-----product-----
  /product:
    get:
      tags: 
      - Products
      summary: Retrieve all product
      description: Returns a list of all product
      responses:
        200:
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'

  /product/{id}:
    get:
      tags: 
      - Products
      summary: Retrieve a single product
      description: Returns a single product by ID
      parameters:
      - in: path
        name: id
        description: Product ID to retrieve
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/Product'
        404:
          description: Product not found

  /product/new:
    post:
      tags: 
      - Products
      summary: Create a new product
      description: Creates a new product and returns the created object
      requestBody:
        name: Product
        description: Product object to create
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Macbook M2 Pro
                description:
                  type: string
                  example: Notebook
                price:
                  type: number
                  example: 2350
                category:
                  type: string
                  example: Apple
                quantity:
                  type: number
                  example: 500
                imageURL:
                  type: string
                  format: binary
      responses:
        201:
          description: Successful response
          schema:
            $ref: '#/definitions/Product'

  /product/{id}/update:
    patch:
      tags: 
      - Products
      summary: Update a product
      description: Updates an existing product and returns the updated object
      parameters:
      - in: path
        name: id
        description: Product ID to update
        required: true
        schema:
          type: string
      requestBody:
        name: Product
        description: Product object with new data
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Macbook M2 Pro
                description:
                  type: string
                  example: Notebook
                price:
                  type: number
                  example: 2350
                category:
                  type: string
                  example: Apple
                quantity:
                  type: number
                  example: 500
                imageURL:
                  type: string
                  format: binary
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/Product'
        404:
          description: Product not found

  /product/{id}/delete:
    delete:
      tags: 
      - Products
      summary: Delete a product
      description: Deletes a product by ID
      parameters:
      - in: path
        name: id
        description: Product ID to delete
        required: true
        schema:
          type: string
      responses:
        204:
          description: Successful response

  #-----cart-----
  /cart:
    get:
      tags: 
      - Carts
      summary: Retrieve all cart
      description: Returns a list of all cart
      responses:
        200:
          description: Successful response
          schema:
            type: array
            $ref: '#/definitions/Cart'

  /cart/new:
    post:
      tags: 
      - Carts
      summary: Create a new cart
      description: Creates a new cart and returns the created object
      requestBody:
        name: Cart
        description: Cart object to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/CartInput'
      responses:
        201:
          description: Successful response

  /cart/{productId}/update:
    patch:
      tags: 
      - Carts
      summary: Update a cart
      description: Updates an existing cart and returns the updated object
      parameters:
      - in: path
        name: id
        description: Cart ID to update
        required: true
        schema:
          type: string
      requestBody:
        name: Cart
        description: Cart object with new data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/CartInput'
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/Cart'
        404:
          description: Cart not found

  /cart/{productId}/delete:
    delete:
      tags: 
      - Carts
      summary: Delete a cart
      description: Deletes a cart by ID
      parameters:
      - in: path
        name: id
        description: Cart ID to delete
        required: true
        schema:
          type: string
      responses:
        204:
          description: Successful response

  #-----order-----
  /order:
    get:
      tags: 
      - Orders
      summary: Retrieve all order
      description: Returns a list of all order
      responses:
        200:
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'

  /order/{id}:
    get:
      tags: 
      - Orders
      summary: Retrieve a single order
      description: Returns a single order by ID
      parameters:
      - in: path
        name: id
        description: Order ID to retrieve
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/Order'
        404:
          description: Order not found

  /order/new:
    post:
      tags: 
      - Orders
      summary: Create a new order
      description: Creates a new order and returns the created object
      responses:
        201:
          description: Successful response

  /order/{id}/update:
    patch:
      tags: 
      - Orders
      summary: Update a order
      description: Updates an existing order and returns the updated object
      parameters:
      - in: path
        name: id
        description: Order ID to update
        required: true
        schema:
          type: string
      requestBody:
        name: Order
        description: Order object with new data
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/definitions/OrderInput'
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/Order'
        404:
          description: Order not found

  /order/{id}/delete:
    delete:
      tags: 
      - Orders
      summary: Delete a order
      description: Deletes a order by ID
      parameters:
      - in: path
        name: id
        description: Order ID to delete
        required: true
        schema:
          type: string
      responses:
        204:
          description: Successful response

  /order/{id}/update/status:
    patch:
      tags: 
      - Orders
      summary: Update a order status
      description: Updates an existing order status and returns the updated object
      parameters:
      - in: path
        name: id
        description: Order ID to update
        required: true
        schema:
          type: string
      requestBody:
        name: Order
        description: Order object with new data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/OrderStatusInput'
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/Order'
        404:
          description: Order not found
  
  #-----payment-----
  /payment:
    get:
      tags: 
      - Payments
      summary: Retrieve all payment
      description: Returns a list of all payment
      responses:
        200:
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/Payment'

  /payment/{paymentId}:
    get:
      tags: 
      - Payments
      summary: Retrieve a single payment
      description: Returns a single payment by ID
      parameters:
      - in: path
        name: id
        description: Payment ID to retrieve
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/Payment'
        404:
          description: Payment not found

  /payment/new:
    post:
      tags: 
      - Payments
      summary: Create a new payment
      description: Creates a new payment and returns the created object
      requestBody:
        name: Payment
        description: Payment object to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/PaymentInput'
      responses:
        201:
          description: Successful response
          schema:
            $ref: '#/definitions/Payment'

definitions:
  User:
    type: object
    properties:
      id:
        type: string
        description: Unique ID of the user
      email:
        type: string
        format: email
        description: Email of the user
      userName:
        type: string
        description: Username of the user
      firstName:
        type: string
        description: Firstname of the user
      lastName:
        type: string
        description: Lastname of the user
      password:
        type: string
        description: Password of the user
      address: 
        type: object
        properties:
          street: 
            type: string
            description: Street of the user
          city: 
            type: string
            description: City of the user
          state: 
            type: string
            description: State of the user
          country:
            type: string
            description: Country of the user
          zipCode: 
            type: number
            description: ZipCode of the user
    example:
      id: 644a78fbe792d9513a9d10e5
      email: johndoe@gmail.com
      userName: JohnDoe
      firstName: John
      lastName: Doe
      password: StrongPassword
      address: 
        street: Amir Temur, Home N-41
        city: Tashkent
        state: Tashkent
        country: Uzbekistan
        zipCode: 123456

  Register:
    type: object
    required:
    - email
    - firstName
    - userName
    - lastName
    - password
    properties:
      email:
        type: string
        format: email
        description: Email of the user
      userName:
        type: string
        description: Username of the user
      firstName:
        type: string
        description: Firstname of the user
      lastName:
        type: string
        description: Lastname of the user
      password:
        type: string
        description: Password of the user
    example:
      email: johndoe@gmail.com
      userName: JohnDoe
      firstName: John
      lastName: Doe
      password: StrongPassword

  Login:
    type: object
    properties: 
      email:
        type: string
        format: email
        description: Email of the user
      password:
        type: string
        description: Password of the user
    example:
      email: johndoe@gmail.com
      password: StrongPassword

  UserInput:
    type: object
    properties:
      userName:
        type: string
        description: Username of the user
      firstName:
        type: string
        description: Firstname of the user
      lastName:
        type: string
        description: Lastname of the user
    example:
      userName: JohnDoe
      firstName: John
      lastName: Doe

  AddressInput:
    type: object
    properties:
      street: 
        type: string
        description: Street of the user
      city: 
        type: string
        description: City of the user
      state: 
        type: string
        description: State of the user
      country:
        type: string
        description: Country of the user
      zipCode: 
        type: number
        description: ZipCode of the user
    example:
      street: Amir Temur, Home N-41
      city: Tashkent
      state: Tashkent
      country: Uzbekistan
      zipCode: 123456

  Product:
    type: object
    properties:
      id:
        type: string
        description: Unique ID of the product
      name:
        type: string
        description: Name of the product
      description:
        type: string
        description: Description of the product
      price:
        type: number
        format: float
        description: Price of the product
      imageURL:
        type: string
        description: ImageURL of the product
      category:
        type: string
        description: Category of the product
      quantity:
        type: number
        format: integer
        description: Quantity of the product
      owner:
        type: object
        properties:
          schema:
            $ref: '#/definitions/Product' 
    example:
      id: 644a78fbe792d9513a9d10e5
      name: Macbook M2 Pro
      description: Notebook
      price: 2350
      imageURL: imageURL
      category: Apple
      quantity: 500
      owner: 
        id: 644a78fbe792d9513a9d10e5
        email: johndoe@gmail.com
        userName: JohnDoe
        firstName: John
        lastName: Doe
        password: StrongPassword
        address: 
          street: Amir Temur, Home N-41
          city: Tashkent
          state: Tashkent
          country: Uzbekistan
          zipCode: 123456

  ProductInput:
    type: object
    required:
    - name
    - description
    - price
    - category
    - quantity
    properties:
      name:
        type: string
        description: Name of the product
      description:
        type: string
        description: Description of the product
      price:
        type: number
        format: float
        description: Price of the product
      category:
        type: string
        description: Category of the product
      quantity:
        type: number
        format: integer
        description: Quantity of the product
    example:
      name: Macbook M2 Pro
      description: Notebook
      price: 2350
      category: Apple
      quantity: 500
  
  Cart:
    type: object
    required:
    - productId
    - quantity
    properties:
      productId:
        type: string
        description: Unique Product ID of the order
      quantity:
        type: number
        format: integer
        description: Quantity of the cart
    example:
      productId: 646ed0ec0554e33e02450ed8
      quantity: 5
  
  CartInput:
    type: object
    required:
    - productId
    - quantity
    properties:
      productId:
        type: string
        description: Unique Product ID of the order
      quantity:
        type: number
        format: integer
        description: Quantity of the cart
    example:
      productId: 646ed0ec0554e33e02450ed8
      quantity: 5
  
  Order:
    type: object
    required:
    - customer
    - products
    - subTotalPrice
    properties:
      customer:
        type: string
        description: The ID of the customer who placed the order
      products:
        type: array
        items:
          required:
          - product
          - quantity
          type: object
          properties:
            product:
              type: string
              description: The ID of the product being ordered
            quantity:
              type: integer
              minimum: 1
              description: The quantity of the product being ordered
      subTotalPrice:
        type: number
        format: float
        minimum: 0
        description: The total price of the order, without taxes or discounts
      status:
        type: string
        enum:
        - pending
        - shipped
        - delivered
        default: pending
        description: The status of the order
    example:
      customer: 6164b77b198d3b4faa9c6b05
      products:
      - product: 6164b77b198d3b4faa9c6b06
        quantity: 2
      - product: 6164b77b198d3b4faa9c6b07
        quantity: 1
      subTotalPrice: 27.50
      status: pending

  OrderInput:
    type: object
    items:
      required:
      - productId
      - quantity
      properties:
        productId:
          type: string
          description: The ID of the product being ordered
        quantity:
          type: integer
          minimum: 1
          description: The quantity of the product being ordered
    example:
      productId: 646ed0ec0554e33e02450ed8
      quantity: 5
  
  OrderStatusInput:
    type: object
    required:
    - status
    properties:
      type: string
      enum:
      - pending
      - shipped
      - delivered
      default: pending
      description: The status of the order
    example: 
      status: pending

  Payment:
    type: object
    required:
      - order
      - customer
      - amount
      - paymentId
    properties:
      order:
        type: string
        description: The ID of the order that was paid for
      customer:
        type: string
        description: The ID of the customer who made the payment
      amount:
        type: number
        format: float
        minimum: 0
        description: The amount of the payment
      paymentStatus:
        type: string
        enum:
          - succeeded
          - failed
        default: succeeded
        description: The status of the payment
      paymentDate:
        type: string
        format: date-time
        default: '2023-04-28T00:00:00Z'
        description: The date and time when the payment was made
      paymentId:
        type: string
        description: The ID of the payment, as provided by the payment provider
    example:
      order: 6164b77b198d3b4faa9c6b08
      customer: 6164b77b198d3b4faa9c6b05
      amount: 27.50
      paymentStatus: succeeded
      paymentDate: '2023-04-28T09:45:00Z'
      paymentId: ch_1234567890

  PaymentInput:
    type: object
    required:
      - orderId
      - customerId
      - amount
      - name
      - email
      - token
    properties:
      orderId:
        type: string
        description: The ID of the order that was paid for
      customerId:
        type: string
        description: The ID of the customer that was paid for
      amount:
        type: number
        format: float
        description: Amount of the order sub total price
      name:
        type: string
        description: Name of the Customer
      email:
        type: string
        format: email
        description: Email of the Customer
      token:
        type: string
        description: Token of the Customer
    example:
      orderId: 6164b77b198d3b4faa9c6b08
      customerId: 6164b77b198d3b4faa9c6b05
      amount: 27.50
      name: John
      email: johndoe@gmail.com
      token: generate token
